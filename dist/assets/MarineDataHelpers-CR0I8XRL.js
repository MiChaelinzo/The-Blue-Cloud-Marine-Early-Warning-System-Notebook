class c{static calculateTemperatureGradient(a){const n=[];for(let s=1;s<a.temperature.length;s++){const t=a.temperature[s]-a.temperature[s-1],e=a.depth[s]-a.depth[s-1];n.push(e!==0?t/e:0)}return n}static findThermoclineDepth(a){const n=this.calculateTemperatureGradient(a),s=n.indexOf(Math.min(...n));return a.depth[s+1]||0}static calculateDensity(a,n,s=0){const t=a,e=n,i=s,r=999.842594+.06793952*t-.00909529*t*t+.0001001685*t*t*t,o=.824493-.0040899*t+76438e-9*t*t-82467e-11*t*t*t+53875e-13*t*t*t*t,h=-.00572466+10227e-8*t-16546e-10*t*t,l=r+o*e+h*e*Math.sqrt(e)+48314e-8*e*e,p=1+i*45e-7;return l*p}static calculateShannonDiversity(a){const n=new Map;let s=0;a.forEach(e=>{const i=n.get(e.species)||0;n.set(e.species,i+e.count),s+=e.count});let t=0;return n.forEach(e=>{const i=e/s;i>0&&(t-=i*Math.log(i))}),t}static calculateDistance(a,n){const t=this.toRadians(n.lat-a.lat),e=this.toRadians(n.lon-a.lon),i=Math.sin(t/2)*Math.sin(t/2)+Math.cos(this.toRadians(a.lat))*Math.cos(this.toRadians(n.lat))*Math.sin(e/2)*Math.sin(e/2);return 6371*(2*Math.atan2(Math.sqrt(i),Math.sqrt(1-i)))}static analyzeOilSpillRisk(a){let n=0;const s=[];if(a.length<2)return{riskScore:0,riskFactors:["Insufficient data"]};for(let e=1;e<a.length;e++)if(Math.abs(a[e].speed-a[e-1].speed)>5){n+=10,s.push("Sudden speed change detected");break}for(let e=1;e<a.length;e++){const i=Math.abs(a[e].heading-a[e-1].heading);if(Math.min(i,360-i)>45){n+=15,s.push("Erratic course changes detected");break}}const t=[{lat:60,lon:-3,name:"North Sea Protected Area"},{lat:43.5,lon:-8,name:"Bay of Biscay Marine Park"}];return a.forEach(e=>{t.forEach(i=>{this.calculateDistance(e.coordinates,i)<50&&(n+=20,s.push(`Near sensitive area: ${i.name}`))})}),{riskScore:Math.min(n,100),riskFactors:s}}static generateSampleOceanData(a=100){const n=Array.from({length:11},(i,r)=>r*(a/10)),s=n.map(i=>20-i*.1+Math.random()*2-1),t=n.map(()=>35+Math.random()*.5-.25),e=n.map(()=>new Date);return{temperature:s,salinity:t,depth:n,coordinates:{lat:45+Math.random()*10,lon:-10+Math.random()*20},timestamp:e}}static generateSampleSpeciesData(a=10){const n=["Cod","Haddock","Herring","Mackerel","Tuna","Sardine","Anchovy"],s=[];for(let t=0;t<a;t++)s.push({species:n[Math.floor(Math.random()*n.length)],count:Math.floor(Math.random()*50)+1,coordinates:{lat:45+Math.random()*10,lon:-10+Math.random()*20},depth:Math.random()*200,timestamp:new Date(Date.now()-Math.random()*30*24*60*60*1e3)});return s}static toRadians(a){return a*(Math.PI/180)}}c.calculateDensity,c.calculateDistance,c.calculateShannonDiversity,c.findThermoclineDepth,c.analyzeOilSpillRisk,c.generateSampleOceanData,c.generateSampleSpeciesData;export{c as MarineDataAnalyzer};
